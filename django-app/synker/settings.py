"""
Django settings for synker project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from os import environ
import logging.config
import sys


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('DJANGO_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(environ.get('DJANGO_DEBUG'))

ALLOWED_HOSTS = environ.get('DJANGO_ALLOWED_HOST')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'web',
    'sync_utils'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'synker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'synker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3' if "test" not in sys.argv else BASE_DIR / 'test-db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

X_FRAME_OPTIONS = 'SAMEORIGIN'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/' #'/static/'
STATIC_ROOT = Path(BASE_DIR).parent.joinpath("statics")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Logging Configuration
# Clear prev config
LOGGING_CONFIG = None

# Get loglevel from env
LOGLEVEL = environ.get('DJANGO_LOGING_LEVEL')

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': LOGLEVEL,
            'handlers': ['console',],
        },
    },
})

API_URL = "https://api.github.com"
API_KEY = environ.get('GITHUB_TOKEN')

REQUEST_HEADERS = {
    "Accept": "application/vnd.github.v3+json",
    "Authorization" : f"token {API_KEY}"
}

SYNKER_REPO_DIR = Path(BASE_DIR).parent.joinpath("repositories")
# create repositories folder if does not exists.
# I know this will need to be shared with the PHP container.
if not SYNKER_REPO_DIR.exists():
    SYNKER_REPO_DIR.mkdir()


GITHUB_REPO_TYPE = environ.get("GITHUB_DEFAULT_REPO_TYPE")
GITHUB_PER_PAGE = int(environ.get("GITHUB_PER_PAGE"))


TEMP_FOLDER = Path(BASE_DIR).joinpath("temp")
if not TEMP_FOLDER.exists():
    TEMP_FOLDER.mkdir()

AUTH_TOKEN_LIFETIME = int(environ.get("AUTH_TOKEN_LIFETIME"))
AUTH_VALID_EMAILS = [ email + "@itcareerswitch.co.uk" for email in environ.get("AUTH_VALID_EMAILS", "").split(",")  ]

print(f"""
    DJANGO DEBUG: {DEBUG}
    STATIC ROOT: {STATIC_ROOT}
    SYNKER REPOS DIR: {SYNKER_REPO_DIR}
    GITHUB Per page: {GITHUB_PER_PAGE}
    TEMP FOLDER: {TEMP_FOLDER}
    GITHUB HEADERS: {REQUEST_HEADERS}
    GITHUB TYPE OF REPO SYNCED: {GITHUB_REPO_TYPE}
    AUTH TOKEN LIFETIME: {AUTH_TOKEN_LIFETIME}
    AUTH_VALID_EMAILS: {AUTH_VALID_EMAILS}
    """)